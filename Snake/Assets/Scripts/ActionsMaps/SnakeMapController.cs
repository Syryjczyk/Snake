//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/ActionsMaps/SnakeMapController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SnakeMapController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SnakeMapController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SnakeMapController"",
    ""maps"": [
        {
            ""name"": ""SnakeActions"",
            ""id"": ""a7ae938d-d0fe-458a-9858-b24a2e3ea68f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""700d57f8-61bb-472c-8c24-ca613a82ddd6"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ef6510f5-0aa9-4808-a2dd-21a3d17aacd7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""cce7bddc-dc92-4121-bcc8-1f418d88343a"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""bc090c5a-2b9d-4da6-8f06-57cc3b926676"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""4cc88262-2b7f-4e18-976c-c3f7a6cae228"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""ad45996d-2706-47eb-9d75-8f0038426462"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""d69f86f5-715f-4b13-bccd-0146406c2e6e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""6b6f3884-aaf4-4c2e-8935-c4bec16da754"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""8fac4aea-e48c-4bc1-9d0b-5539d18dcfa0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""deddc6b9-4000-4358-a950-3e1664d0094d"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SnakeActions
        m_SnakeActions = asset.FindActionMap("SnakeActions", throwIfNotFound: true);
        m_SnakeActions_Movement = m_SnakeActions.FindAction("Movement", throwIfNotFound: true);
        m_SnakeActions_TouchMovement = m_SnakeActions.FindAction("TouchMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SnakeActions
    private readonly InputActionMap m_SnakeActions;
    private ISnakeActionsActions m_SnakeActionsActionsCallbackInterface;
    private readonly InputAction m_SnakeActions_Movement;
    private readonly InputAction m_SnakeActions_TouchMovement;
    public struct SnakeActionsActions
    {
        private @SnakeMapController m_Wrapper;
        public SnakeActionsActions(@SnakeMapController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_SnakeActions_Movement;
        public InputAction @TouchMovement => m_Wrapper.m_SnakeActions_TouchMovement;
        public InputActionMap Get() { return m_Wrapper.m_SnakeActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeActionsActions set) { return set.Get(); }
        public void SetCallbacks(ISnakeActionsActions instance)
        {
            if (m_Wrapper.m_SnakeActionsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_SnakeActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_SnakeActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_SnakeActionsActionsCallbackInterface.OnMovement;
                @TouchMovement.started -= m_Wrapper.m_SnakeActionsActionsCallbackInterface.OnTouchMovement;
                @TouchMovement.performed -= m_Wrapper.m_SnakeActionsActionsCallbackInterface.OnTouchMovement;
                @TouchMovement.canceled -= m_Wrapper.m_SnakeActionsActionsCallbackInterface.OnTouchMovement;
            }
            m_Wrapper.m_SnakeActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @TouchMovement.started += instance.OnTouchMovement;
                @TouchMovement.performed += instance.OnTouchMovement;
                @TouchMovement.canceled += instance.OnTouchMovement;
            }
        }
    }
    public SnakeActionsActions @SnakeActions => new SnakeActionsActions(this);
    public interface ISnakeActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTouchMovement(InputAction.CallbackContext context);
    }
}
